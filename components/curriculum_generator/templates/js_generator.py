# scripts/curriculum_generator/templates/js_generator.py
"""
JavaScript generation for curriculum interactivity
"""

from typing import Dict, List, Optional
import logging

logger = logging.getLogger(__name__)


class JSGenerator:
    """Generates JavaScript for curriculum HTML interactions"""
    
    def __init__(self):
        self.features = {
            'tab_navigation': True,
            'search_filtering': True,
            'component_details': True,
            'assessment_calculator': True,
            'export_functions': True
        }
    
    def generate_curriculum_js(self, features: Optional[Dict[str, bool]] = None) -> str:
        """Generate complete JavaScript for curriculum visualization"""
        
        if features:
            self.features.update(features)
        
        js_code = """
// Curriculum Visualization JavaScript
// Generated by Curriculum Generator v2.0

document.addEventListener('DOMContentLoaded', function() {
    console.log('Curriculum visualization loaded');
    initializeCurriculumFeatures();
});

function initializeCurriculumFeatures() {
    setupTabNavigation();
    setupSearchFiltering();
    setupComponentInteractions();
    setupAssessmentCalculator();
    setupExportFunctions();
    setupAnimations();
}
"""
        
        if self.features.get('tab_navigation', True):
            js_code += self._generate_tab_navigation_js()
        
        if self.features.get('search_filtering', True):
            js_code += self._generate_search_filtering_js()
        
        if self.features.get('component_details', True):
            js_code += self._generate_component_details_js()
        
        if self.features.get('assessment_calculator', True):
            js_code += self._generate_assessment_calculator_js()
        
        if self.features.get('export_functions', True):
            js_code += self._generate_export_functions_js()
        
        js_code += self._generate_utility_functions_js()
        
        return js_code
    
    def _generate_tab_navigation_js(self) -> str:
        """Generate tab navigation JavaScript"""
        
        return """
// Tab Navigation System
function setupTabNavigation() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            openTab(e, this.textContent.trim().replace(' ', '') + 'View');
        });
    });
}

function openTab(evt, tabName) {
    // Hide all tab contents
    const tabContents = document.querySelectorAll('.tab-content');
    tabContents.forEach(content => {
        content.classList.remove('active');
    });
    
    // Remove active class from all tab buttons
    const tabButtons = document.querySelectorAll('.tab-button');
    tabButtons.forEach(button => {
        button.classList.remove('active');
    });
    
    // Show the selected tab content
    const selectedTab = document.getElementById(tabName);
    if (selectedTab) {
        selectedTab.classList.add('active');
    }
    
    // Add active class to the clicked button
    if (evt && evt.currentTarget) {
        evt.currentTarget.classList.add('active');
    }
    
    // Trigger any tab-specific initialization
    initializeTabContent(tabName);
}

function initializeTabContent(tabName) {
    switch(tabName) {
        case 'ComponentView':
            initializeComponentTable();
            break;
        case 'SemesterView':
            initializeSemesterView();
            break;
        case 'ProgressionView':
            initializeProgressionView();
            break;
        case 'CompetencyView':
            initializeCompetencyView();
            break;
        case 'AssessmentView':
            initializeAssessmentView();
            break;
    }
}

"""
    
    def _generate_search_filtering_js(self) -> str:
        """Generate search and filtering JavaScript"""
        
        return """
// Search and Filtering System
function setupSearchFiltering() {
    createSearchInterface();
    setupFilterButtons();
}

function createSearchInterface() {
    const componentView = document.getElementById('ComponentView');
    if (!componentView) return;
    
    const searchContainer = document.createElement('div');
    searchContainer.className = 'search-container';
    searchContainer.innerHTML = `
        <div class="search-controls">
            <input type="text" id="componentSearch" placeholder="Search components..." class="search-input">
            <div class="filter-buttons">
                <button class="filter-btn active" data-filter="all">All</button>
                <button class="filter-btn" data-filter="work-based">Work-based</button>
                <button class="filter-btn" data-filter="practical">Practical</button>
                <button class="filter-btn" data-filter="theoretical">Theoretical</button>
                <button class="filter-btn" data-filter="mixed">Mixed</button>
            </div>
        </div>
    `;
    
    const table = componentView.querySelector('.components-table-container');
    if (table) {
        componentView.insertBefore(searchContainer, table);
    }
    
    // Add search functionality
    const searchInput = document.getElementById('componentSearch');
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            filterComponents(this.value);
        });
    }
}

function setupFilterButtons() {
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('filter-btn')) {
            // Update active state
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            e.target.classList.add('active');
            
            // Apply filter
            const filterType = e.target.getAttribute('data-filter');
            filterComponentsByType(filterType);
        }
    });
}

function filterComponents(searchTerm) {
    const rows = document.querySelectorAll('.components-table tbody tr');
    const searchLower = searchTerm.toLowerCase();
    
    rows.forEach(row => {
        const componentName = row.querySelector('.component-name');
        const text = componentName ? componentName.textContent.toLowerCase() : '';
        
        if (text.includes(searchLower)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
    
    updateSearchResults();
}

function filterComponentsByType(filterType) {
    const rows = document.querySelectorAll('.components-table tbody tr');
    
    rows.forEach(row => {
        if (filterType === 'all') {
            row.style.display = '';
        } else {
            const hasClass = row.classList.contains(filterType + '-row');
            row.style.display = hasClass ? '' : 'none';
        }
    });
    
    updateSearchResults();
}

function updateSearchResults() {
    const visibleRows = document.querySelectorAll('.components-table tbody tr[style=""], .components-table tbody tr:not([style])');
    const totalRows = document.querySelectorAll('.components-table tbody tr').length;
    
    // Update search results indicator
    let indicator = document.querySelector('.search-results');
    if (!indicator) {
        indicator = document.createElement('div');
        indicator.className = 'search-results';
        const searchContainer = document.querySelector('.search-container');
        if (searchContainer) {
            searchContainer.appendChild(indicator);
        }
    }
    
    indicator.textContent = `Showing ${visibleRows.length} of ${totalRows} components`;
}

"""
    
    def _generate_component_details_js(self) -> str:
        """Generate component interaction JavaScript"""
        
        return """
// Component Details and Interactions
function setupComponentInteractions() {
    setupComponentRowClicks();
    setupComponentCards();
    setupTooltips();
}

function initializeComponentTable() {
    addTableSortability();
    addRowHoverEffects();
}

function setupComponentRowClicks() {
    document.addEventListener('click', function(e) {
        const row = e.target.closest('.components-table tbody tr');
        if (row) {
            toggleComponentDetails(row);
        }
    });
}

function toggleComponentDetails(row) {
    const existingDetails = row.nextElementSibling;
    
    if (existingDetails && existingDetails.classList.contains('component-details-row')) {
        // Remove existing details
        existingDetails.remove();
        row.classList.remove('expanded');
    } else {
        // Add component details
        const detailsRow = createComponentDetailsRow(row);
        row.insertAdjacentElement('afterend', detailsRow);
        row.classList.add('expanded');
    }
}

function createComponentDetailsRow(row) {
    const cells = row.querySelectorAll('td');
    const componentName = cells[1] ? cells[1].textContent : 'Unknown';
    const ects = cells[2] ? cells[2].textContent : '0';
    
    const detailsRow = document.createElement('tr');
    detailsRow.className = 'component-details-row';
    detailsRow.innerHTML = `
        <td colspan="7">
            <div class="component-details-content">
                <h4>${componentName} - Details</h4>
                <div class="details-grid">
                    <div class="detail-item">
                        <strong>ECTS Allocation:</strong> ${ects}
                    </div>
                    <div class="detail-item">
                        <strong>Learning Hours:</strong> ${parseFloat(ects) * 25} hours
                    </div>
                    <div class="detail-item">
                        <strong>Contact Hours:</strong> ${Math.round(parseFloat(ects) * 10)} hours
                    </div>
                    <div class="detail-item">
                        <strong>Self-Study:</strong> ${Math.round(parseFloat(ects) * 15)} hours
                    </div>
                </div>
                <div class="detail-actions">
                    <button onclick="exportComponent('${componentName}')" class="btn-small">Export</button>
                    <button onclick="viewAssessments('${componentName}')" class="btn-small">Assessments</button>
                </div>
            </div>
        </td>
    `;
    
    return detailsRow;
}

function setupComponentCards() {
    const cards = document.querySelectorAll('.component-card');
    cards.forEach(card => {
        card.addEventListener('click', function() {
            this.classList.toggle('expanded');
        });
    });
}

function addTableSortability() {
    const headers = document.querySelectorAll('.components-table th');
    headers.forEach((header, index) => {
        if (index < 5) { // Make first 5 columns sortable
            header.style.cursor = 'pointer';
            header.addEventListener('click', function() {
                sortTable(index);
            });
        }
    });
}

function sortTable(columnIndex) {
    const table = document.querySelector('.components-table');
    const tbody = table.querySelector('tbody');
    const rows = Array.from(tbody.querySelectorAll('tr:not(.component-details-row)'));
    
    const isAscending = table.getAttribute('data-sort-direction') !== 'asc';
    
    rows.sort((a, b) => {
        const aText = a.cells[columnIndex].textContent.trim();
        const bText = b.cells[columnIndex].textContent.trim();
        
        // Try to parse as numbers first
        const aNum = parseFloat(aText);
        const bNum = parseFloat(bText);
        
        if (!isNaN(aNum) && !isNaN(bNum)) {
            return isAscending ? aNum - bNum : bNum - aNum;
        }
        
        // Sort as strings
        return isAscending ? aText.localeCompare(bText) : bText.localeCompare(aText);
    });
    
    // Clear and re-append sorted rows
    tbody.innerHTML = '';
    rows.forEach(row => tbody.appendChild(row));
    
    // Update sort direction
    table.setAttribute('data-sort-direction', isAscending ? 'asc' : 'desc');
}

"""
    
    def _generate_assessment_calculator_js(self) -> str:
        """Generate assessment calculator JavaScript"""
        
        return """
// Assessment Calculator
function setupAssessmentCalculator() {
    createAssessmentCalculator();
}

function initializeAssessmentView() {
    updateAssessmentStatistics();
    createAssessmentCharts();
}

function createAssessmentCalculator() {
    // Add calculator to assessment view
    const assessmentView = document.getElementById('AssessmentView');
    if (!assessmentView) return;
    
    const calculator = document.createElement('div');
    calculator.className = 'assessment-calculator';
    calculator.innerHTML = `
        <div class="calculator-section">
            <h3>Assessment Load Calculator</h3>
            <div class="calculator-controls">
                <label>
                    Target ECTS: 
                    <input type="number" id="targetEcts" value="30" min="1" max="240">
                </label>
                <label>
                    Assessment Ratio (%): 
                    <input type="number" id="assessmentRatio" value="20" min="5" max="50">
                </label>
                <button onclick="calculateAssessmentLoad()" class="btn-primary">Calculate</button>
            </div>
            <div id="calculatorResults" class="calculator-results"></div>
        </div>
    `;
    
    assessmentView.insertBefore(calculator, assessmentView.firstChild);
}

function calculateAssessmentLoad() {
    const targetEcts = parseFloat(document.getElementById('targetEcts').value) || 30;
    const assessmentRatio = parseFloat(document.getElementById('assessmentRatio').value) || 20;
    
    const totalLearningHours = targetEcts * 25;
    const assessmentHours = totalLearningHours * (assessmentRatio / 100);
    const studyHours = totalLearningHours - assessmentHours;
    
    const results = document.getElementById('calculatorResults');
    results.innerHTML = `
        <div class="calculation-result">
            <h4>Assessment Load Analysis</h4>
            <div class="result-grid">
                <div class="result-item">
                    <span class="result-label">Total Learning Hours:</span>
                    <span class="result-value">${totalLearningHours} hours</span>
                </div>
                <div class="result-item">
                    <span class="result-label">Assessment Hours:</span>
                    <span class="result-value">${assessmentHours.toFixed(1)} hours</span>
                </div>
                <div class="result-item">
                    <span class="result-label">Study Hours:</span>
                    <span class="result-value">${studyHours.toFixed(1)} hours</span>
                </div>
                <div class="result-item">
                    <span class="result-label">Assessment Workload:</span>
                    <span class="result-value">${assessmentRatio}%</span>
                </div>
            </div>
        </div>
    `;
}

function updateAssessmentStatistics() {
    const assessmentCells = document.querySelectorAll('.assessment-cell');
    const methodCounts = {};
    
    assessmentCells.forEach(cell => {
        const methods = cell.textContent.split(',').map(m => m.trim());
        methods.forEach(method => {
            if (method && method !== 'N/A') {
                methodCounts[method] = (methodCounts[method] || 0) + 1;
            }
        });
    });
    
    console.log('Assessment method distribution:', methodCounts);
}

"""
    
    def _generate_export_functions_js(self) -> str:
        """Generate export functionality JavaScript"""
        
        return """
// Export Functions
function setupExportFunctions() {
    createExportControls();
}

function createExportControls() {
    const header = document.querySelector('.curriculum-header');
    if (!header) return;
    
    const exportControls = document.createElement('div');
    exportControls.className = 'export-controls';
    exportControls.innerHTML = `
        <div class="export-buttons">
            <button onclick="exportToPDF()" class="btn-export">Export PDF</button>
            <button onclick="exportToJSON()" class="btn-export">Export JSON</button>
            <button onclick="exportToCSV()" class="btn-export">Export CSV</button>
            <button onclick="printCurriculum()" class="btn-export">Print</button>
        </div>
    `;
    
    header.appendChild(exportControls);
}

function exportToPDF() {
    // Simple print-based PDF export
    window.print();
}

function exportToJSON() {
    const curriculumData = extractCurriculumData();
    const dataStr = JSON.stringify(curriculumData, null, 2);
    downloadFile(dataStr, 'curriculum.json', 'application/json');
}

function exportToCSV() {
    const components = extractComponentsData();
    const csv = convertToCSV(components);
    downloadFile(csv, 'curriculum_components.csv', 'text/csv');
}

function printCurriculum() {
    // Show all tabs for printing
    const tabContents = document.querySelectorAll('.tab-content');
    tabContents.forEach(content => {
        content.style.display = 'block';
    });
    
    window.print();
    
    // Restore tab visibility
    setTimeout(() => {
        tabContents.forEach(content => {
            content.style.display = '';
        });
        document.querySelector('.tab-content.active').style.display = 'block';
    }, 100);
}

function extractCurriculumData() {
    const title = document.querySelector('.curriculum-header h1').textContent;
    const domain = document.querySelector('.domain-badge').textContent;
    const topic = document.querySelector('.topic-badge').textContent;
    
    return {
        title: title,
        domain: domain,
        topic: topic,
        exportDate: new Date().toISOString(),
        components: extractComponentsData()
    };
}

function extractComponentsData() {
    const rows = document.querySelectorAll('.components-table tbody tr:not(.component-details-row)');
    return Array.from(rows).map(row => {
        const cells = row.querySelectorAll('td');
        return {
            id: cells[0] ? cells[0].textContent.trim() : '',
            name: cells[1] ? cells[1].textContent.trim() : '',
            ects: cells[2] ? cells[2].textContent.trim() : '',
            type: cells[3] ? cells[3].textContent.trim() : '',
            relevance: cells[4] ? cells[4].textContent.trim() : '',
            source: cells[5] ? cells[5].textContent.trim() : '',
            assessment: cells[6] ? cells[6].textContent.trim() : ''
        };
    });
}

function convertToCSV(data) {
    if (!data.length) return '';
    
    const headers = Object.keys(data[0]);
    const csvContent = [
        headers.join(','),
        ...data.map(row => headers.map(header => `"${row[header]}"`).join(','))
    ].join('\\n');
    
    return csvContent;
}

function downloadFile(content, filename, mimeType) {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

function exportComponent(componentName) {
    console.log('Exporting component:', componentName);
    // Implementation for single component export
}

function viewAssessments(componentName) {
    console.log('Viewing assessments for:', componentName);
    // Switch to assessment tab and filter by component
    openTab(null, 'AssessmentView');
}

"""
    
    def _generate_utility_functions_js(self) -> str:
        """Generate utility functions JavaScript"""
        
        return """
// Utility Functions
function setupAnimations() {
    // Animate metric values on load
    animateMetricValues();
    
    // Setup hover effects
    setupHoverEffects();
    
    // Setup smooth scrolling
    setupSmoothScrolling();
}

function animateMetricValues() {
    const metricValues = document.querySelectorAll('.metric-value');
    
    metricValues.forEach(metric => {
        const finalValue = metric.textContent;
        const numValue = parseFloat(finalValue);
        
        if (!isNaN(numValue)) {
            metric.textContent = '0';
            animateNumber(metric, 0, numValue, 1000);
        }
    });
}

function animateNumber(element, start, end, duration) {
    const startTime = performance.now();
    
    function updateNumber(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        const currentValue = start + (end - start) * easeOutCubic(progress);
        
        if (Number.isInteger(end)) {
            element.textContent = Math.round(currentValue);
        } else {
            element.textContent = currentValue.toFixed(1);
        }
        
        if (progress < 1) {
            requestAnimationFrame(updateNumber);
        }
    }
    
    requestAnimationFrame(updateNumber);
}

function easeOutCubic(t) {
    return 1 - Math.pow(1 - t, 3);
}

function setupHoverEffects() {
    // Enhanced table row hover effects
    const tableRows = document.querySelectorAll('.components-table tbody tr');
    tableRows.forEach(row => {
        row.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.01)';
            this.style.transition = 'transform 0.2s ease';
        });
        
        row.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1)';
        });
    });
    
    // Card hover effects
    const cards = document.querySelectorAll('.component-card, .pathway-card, .method-card');
    cards.forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-3px)';
            this.style.transition = 'transform 0.3s ease';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
        });
    });
}

function setupSmoothScrolling() {
    // Add smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
}

function setupTooltips() {
    // Simple tooltip system
    const tooltipElements = document.querySelectorAll('[data-tooltip]');
    
    tooltipElements.forEach(element => {
        element.addEventListener('mouseenter', function(e) {
            showTooltip(e, this.getAttribute('data-tooltip'));
        });
        
        element.addEventListener('mouseleave', function() {
            hideTooltip();
        });
    });
}

function showTooltip(event, text) {
    const tooltip = document.createElement('div');
    tooltip.className = 'tooltip';
    tooltip.textContent = text;
    tooltip.style.position = 'absolute';
    tooltip.style.background = '#333';
    tooltip.style.color = 'white';
    tooltip.style.padding = '8px 12px';
    tooltip.style.borderRadius = '4px';
    tooltip.style.fontSize = '14px';
    tooltip.style.zIndex = '1000';
    tooltip.style.pointerEvents = 'none';
    
    document.body.appendChild(tooltip);
    
    const rect = tooltip.getBoundingClientRect();
    tooltip.style.left = (event.pageX - rect.width / 2) + 'px';
    tooltip.style.top = (event.pageY - rect.height - 10) + 'px';
}

function hideTooltip() {
    const tooltip = document.querySelector('.tooltip');
    if (tooltip) {
        tooltip.remove();
    }
}

// Semester view specific functions
function initializeSemesterView() {
    console.log('Initializing semester view');
}

function initializeProgressionView() {
    console.log('Initializing progression view');
}

function initializeCompetencyView() {
    console.log('Initializing competency view');
}

// Keyboard shortcuts
document.addEventListener('keydown', function(e) {
    // Tab navigation with number keys
    if (e.key >= '1' && e.key <= '5' && e.ctrlKey) {
        e.preventDefault();
        const tabIndex = parseInt(e.key) - 1;
        const tabButtons = document.querySelectorAll('.tab-button');
        if (tabButtons[tabIndex]) {
            tabButtons[tabIndex].click();
        }
    }
    
    // Export shortcuts
    if (e.ctrlKey && e.key === 'e') {
        e.preventDefault();
        exportToJSON();
    }
    
    if (e.ctrlKey && e.key === 'p') {
        e.preventDefault();
        printCurriculum();
    }
});

// Initialize everything when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeCurriculumFeatures);
} else {
    initializeCurriculumFeatures();
}
"""
